@page "/login"
@using Blazor_Finance_Web.Models
@using Blazor_Finance_Web.Services
@using Blazor_Finance_Web.Services.Interfaces
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IUsuarioService usuarioService
@inject AuthenticationStateProvider authStateProvider

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm method="post" Model="@Usuario" OnSubmit="Autenticar" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="img/avatar.jpg" style="max-height:5rem;" />
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Usuario.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Usuario.Email" />
            </div>
            <div class="mb-3">
                <label>Senha</label>
                <InputText @bind-Value="Usuario.Senha" type="password" class="form-control" placeholder="Senha" />
                <ValidationMessage For="() => Usuario.Senha" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@MensagemErro</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public Usuario Usuario { get; set; } = new();

    private string? MensagemErro;

    private async Task Autenticar()
    {
        var usuarioAutenticado = await usuarioService.AutenticarAsync(Usuario.Email, Usuario.Senha);

        if (usuarioAutenticado != null)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, usuarioAutenticado.Nome)
            };
            var claimsIdentity = new ClaimsIdentity(claims, "CustomAuth");

            var authProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await authProvider.SignInAsync(new ClaimsPrincipal(claimsIdentity));

            navigationManager.NavigateTo("/");
        }
        else
        {
            MensagemErro = "Email ou senha inválidos.";
        }
    }
}
