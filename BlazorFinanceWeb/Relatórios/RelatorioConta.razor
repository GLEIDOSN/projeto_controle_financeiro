@page "/relatorioConta"
@using FinanceWeb.Enums
@using FinanceWeb.Models
@using FinanceWeb.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@inject IJSRuntime js
@inject IContaService contaService

<h1>Relatório de Contas a Pagar/Receber</h1>

<div class="d-flex align-items-center mb-3">
    <div class="me-2">
        <label for="tipoConta" class="form-label">Tipo de Conta:</label>
        <select @bind="TipoContaFiltro" class="form-select" name="tipoConta">
            <option value="">Todos</option>
            <option value="Pagar">Pagar</option>
            <option value="Receber">Receber</option>
        </select>
    </div>

    <div class="me-2">
        <label for="dataInicio" class="form-label">Data Início:</label>
        <input name="dataInicio" type="date" @bind="DataInicio" class="form-control" />
    </div>

    <div class="me-2">
        <label for="dataFim" class="form-label">Data Fim:</label>
        <input name="dataFim" type="date" @bind="DataFim" class="form-control" />
    </div>

    <div class="me-2">
        <label for="statusConta" class="form-label">Status:</label>
        <select @bind="StatusConta" class="form-select" name="statusConta">
            <option value="Todos">Todos</option>
            <option value="Pendente">Pendente</option>
            <option value="Pago">Pago</option>
        </select>
    </div>

    <div class="align-self-end">
        <button @onclick="Filtrar" class="btn btn-primary me-2">Filtrar</button>
        <button @onclick="GerarPdf" class="btn btn-secondary">Gerar PDF</button>
    </div>
</div>


<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th style="width: 200px;">Descrição</th>
            <th style="width: 200px;">Tipo Conta</th>
            <th>Valor</th>
            <th>Data de Vencimento</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @if (ContasPagar == null || !ContasPagar.Any())
        {
            <tr>
                <td colspan="5">Nenhuma conta a pagar encontrada.</td>
            </tr>
        }
        else
        {
            foreach (var conta in ContasPagar)
            {
                <tr>
                    <td>@conta.Id</td>
                    <td>@conta.Descricao</td>
                    <td>@conta.TipoFormatado</td>
                    <td>@conta.ValorFormatado</td>
                    <td>@conta.DataVencimentoFormatado</td>
                    <td>@(conta.Pago ? "Pago" : "Pendente")</td>
                </tr>
            }

            <tr>
                <td colspan="3"><strong>Total</strong></td>
                <td><strong>@ContasPagar.Sum(c => c.Valor).ToString("C2", CultureInfo.CurrentCulture)</strong></td>
                <td colspan="3"></td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Conta> ContasPagar = new();
    private DateTime? DataInicio { get; set; }
    private DateTime? DataFim { get; set; }
    private TipoConta? TipoContaFiltro { get; set; } = null;
    private string StatusConta { get; set; } = "Todos";

    protected override async Task OnInitializedAsync()
    {
        var today = DateTime.Today;
        DataInicio = new DateTime(today.Year, today.Month, 1);
        DataFim = DataInicio.Value.AddMonths(1).AddDays(-1);

        await LoadData();
    }

    private async Task LoadData()
    {
        ContasPagar = await contaService.ObterContasAsync(DataInicio, DataFim, StatusConta, TipoContaFiltro);
    }

    private async Task Filtrar()
    {
        // Verificar se as datas foram preenchidas
        if (!DataInicio.HasValue || !DataFim.HasValue)
        {
            // Exibir uma mensagem de erro
            await js.InvokeVoidAsync("alert", "Por favor, preencha as datas de início e fim.");
            return;
        }
        await LoadData();
    }

    private async Task GerarPdf()
    {
        // Implementar lógica para gerar o PDF
        // Você pode chamar um método de um serviço que cria o PDF a partir da lista de contas
        await js.InvokeVoidAsync("downloadPdf");
    }
}
