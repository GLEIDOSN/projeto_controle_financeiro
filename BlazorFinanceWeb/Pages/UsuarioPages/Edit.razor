@page "/usuarios/edit"
@using Microsoft.EntityFrameworkCore
@using FinanceWeb.Models
@inject IDbContextFactory<FinanceWeb.Data.FinanceWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edição Usuário</PageTitle>

<h2>Edição Usuário</h2>
<hr />
@if (Usuario is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Usuario" OnValidSubmit="UpdateUsuario" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Usuario.Id" value="@Usuario.Id" />
                <div class="mb-3">
                    <label for="nome" class="form-label">Nome:</label>
                    <InputText id="nome" @bind-Value="Usuario.Nome" class="form-control" />
                    <ValidationMessage For="() => Usuario.Nome" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Usuario.Email" class="form-control" />
                    <ValidationMessage For="() => Usuario.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="NovaSenha" class="form-label">Senha (Deixe em branco para não alterar):</label>
                    <InputText id="NovaSenha" @bind-Value="NovaSenha" type="password" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Salvar</button> |
                <a href="/usuarios" class="btn btn-outline-secondary">Retornar para lista</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Usuario? Usuario { get; set; }

    // Campo para armazenar a nova senha
    private string? NovaSenha { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Usuario ??= await context.Usuarios.FirstOrDefaultAsync(m => m.Id == Id);

        if (Usuario is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateUsuario()
    {
        using var context = DbFactory.CreateDbContext();
        var usuarioDb = await context.Usuarios.FindAsync(Usuario!.Id);

        if (usuarioDb != null)
        {
            // Atualizar os campos modificáveis
            usuarioDb.Nome = Usuario.Nome;
            usuarioDb.Email = Usuario.Email;

            // Se uma nova senha foi fornecida, criptografe-a e atualize o SenhaHash
            if (!string.IsNullOrEmpty(NovaSenha))
            {
                usuarioDb.SenhaHash = BCrypt.Net.BCrypt.HashPassword(NovaSenha);
            }

            try
            {
                await context.SaveChangesAsync();
                NavigationManager.NavigateTo("/usuarios");
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!UsuarioExists(Usuario!.Id))
                {
                    NavigationManager.NavigateTo("notfound");
                }
                else
                {
                    throw;
                }
            }
        }
    }

    private bool UsuarioExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Usuarios.Any(e => e.Id == id);
    }
}
