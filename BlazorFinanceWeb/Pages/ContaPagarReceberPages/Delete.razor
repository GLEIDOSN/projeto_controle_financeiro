@page "/contas/delete"
@using FinanceWeb.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@using FinanceWeb.Models
@inject IContaService contaService
@inject NavigationManager navigationManager

<PageTitle>Deletar Contas</PageTitle>

<div>
    <h2>Tem certeza que deseja deletar o resgistro?</h2>
    <hr />
    @if (conta is null)
    {
        <p><em>Carregando...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Descricao</dt>
            <dd class="col-sm-10">@conta.Descricao</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Valor</dt>
            <dd class="col-sm-10">@conta.ValorFormatado</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DataVencimento</dt>
            <dd class="col-sm-10">@conta.DataVencimentoFormatado</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Pago</dt>
            <dd class="col-sm-10">@conta.Pago</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Tipo</dt>
            <dd class="col-sm-10">@conta.Tipo</dd>
        </dl>
        <EditForm method="post" Model="conta" OnValidSubmit="DeleteConta" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(conta is null)">Deletar</button> |
            <a href="/contas" class="btn btn-outline-secondary">Retornar para lista</a>
        </EditForm>
    }
</div>

@code {
    private Conta? conta;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        conta = await contaService.GetContaByIdAsync(Id);
        if (conta == null)
        {
            navigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteConta()
    {
        await contaService.DeleteContaAsync(Id);
        navigationManager.NavigateTo("/contas");
    }
}
